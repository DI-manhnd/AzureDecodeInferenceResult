# automatically generated by the FlatBuffers compiler, do not modify

import flatbuffers

# Namespace: SmartCamera
class BoundingBox(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoundingBox()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBoundingBox(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # BoundingBox
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoundingBox
    def Left(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint16Flags, o + self._tab.Pos
            )
        return 0

    # BoundingBox
    def Top(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint16Flags, o + self._tab.Pos
            )
        return 0

    # BoundingBox
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint16Flags, o + self._tab.Pos
            )
        return 0

    # BoundingBox
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint16Flags, o + self._tab.Pos
            )
        return 0


def BoundingBoxStart(builder):
    builder.StartObject(4)


def Start(builder):
    return BoundingBoxStart(builder)


def BoundingBoxAddLeft(builder, left):
    builder.PrependUint16Slot(0, left, 0)


def AddLeft(builder, left):
    return BoundingBoxAddLeft(builder, left)


def BoundingBoxAddTop(builder, top):
    builder.PrependUint16Slot(1, top, 0)


def AddTop(builder, top):
    return BoundingBoxAddTop(builder, top)


def BoundingBoxAddWidth(builder, width):
    builder.PrependUint16Slot(2, width, 0)


def AddWidth(builder, width):
    return BoundingBoxAddWidth(builder, width)


def BoundingBoxAddHeight(builder, height):
    builder.PrependUint16Slot(3, height, 0)


def AddHeight(builder, height):
    return BoundingBoxAddHeight(builder, height)


def BoundingBoxEnd(builder):
    return builder.EndObject()


def End(builder):
    return BoundingBoxEnd(builder)


# Namespace: SmartCamera
class DeadTrackData(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeadTrackData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeadTrackData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # DeadTrackData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeadTrackData
    def Age(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Int16Flags, o + self._tab.Pos
            )
        return 0

    # DeadTrackData
    def DetailWatchTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DeadTrackData
    def DetailWatchTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Vector(j, o)
        return 0

    # DeadTrackData
    def DirectionYaw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint8Flags, o + self._tab.Pos
            )
        return 0

    # DeadTrackData
    def DirectionPitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint8Flags, o + self._tab.Pos
            )
        return 0

    # DeadTrackData
    def Gender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint8Flags, o + self._tab.Pos
            )
        return 0

    # DeadTrackData
    def StayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0

    # DeadTrackData
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0

    # DeadTrackData
    def TrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.StringFlags, o + self._tab.Pos
            )
        return None

    # DeadTrackData
    def WatchStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0

    # DeadTrackData
    def BboxCoords(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            obj = flatbuffers.table.Table()
            obj.Init(self._tab.Bytes, o + self._tab.Pos)
            return obj
        return None


def DeadTrackDataStart(builder):
    builder.StartObject(10)


def DeadTrackDataAddAge(builder, age):
    builder.PrependInt16Slot(0, age, 0)


def AddAge(builder, age):
    DeadTrackDataAddAge(builder, age)


def DeadTrackDataAddDetailWatchTime(builder, detailWatchTime):
    builder.PrependUOffsetTRelativeSlot(1, detailWatchTime, 0)


def AddDetailWatchTime(builder, detailWatchTime):
    DeadTrackDataAddDetailWatchTime(builder, detailWatchTime)


def DeadTrackDataAddDirectionYaw(builder, directionYaw):
    builder.PrependUint8Slot(2, directionYaw, 0)


def AddDirectionYaw(builder, directionYaw):
    DeadTrackDataAddDirectionYaw(builder, directionYaw)


def DeadTrackDataAddDirectionPitch(builder, directionPitch):
    builder.PrependUint8Slot(3, directionPitch, 0)


def AddDirectionPitch(builder, directionPitch):
    DeadTrackDataAddDirectionPitch(builder, directionPitch)


def DeadTrackDataAddGender(builder, gender):
    builder.PrependUint8Slot(4, gender, 0)


def AddGender(builder, gender):
    DeadTrackDataAddGender(builder, gender)


def DeadTrackDataAddStayTime(builder, stayTime):
    builder.PrependUint64Slot(5, stayTime, 0)


def AddStayTime(builder, stayTime):
    DeadTrackDataAddStayTime(builder, stayTime)


def DeadTrackDataAddTimestamp(builder, timestamp):
    builder.PrependUint64Slot(6, timestamp, 0)


def AddTimestamp(builder, timestamp):
    DeadTrackDataAddTimestamp(builder, timestamp)


def DeadTrackDataAddTrackId(builder, trackId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.StringFlags(), trackId)


def AddTrackId(builder, trackId):
    DeadTrackDataAddTrackId(builder, builder.CreateString(trackId))


def DeadTrackDataAddWatchStartTime(builder, watchStartTime):
    builder.PrependUint64Slot(8, watchStartTime, 0)


def AddWatchStartTime(builder, watchStartTime):
    DeadTrackDataAddWatchStartTime(builder, watchStartTime)


def DeadTrackDataAddBboxCoords(builder, bboxCoords):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(bboxCoords), 0)


def AddBboxCoords(builder, bboxCoords):
    DeadTrackDataAddBboxCoords(builder, bboxCoords)


def DeadTrackDataEnd(builder):
    return builder.EndObject()


def EndDeadTrackData(builder):
    return DeadTrackDataEnd(builder)


# Namespace: SmartCamera
class HeadBoxData(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HeadBoxData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHeadBoxData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # HeadBoxData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HeadBoxData
    def First(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            obj = BoundingBox()
            obj.Init(self._tab.Bytes, o + self._tab.Pos)
            return obj
        return None

    # HeadBoxData
    def Last(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            obj = BoundingBox()
            obj.Init(self._tab.Bytes, o + self._tab.Pos)
            return obj
        return None

    # HeadBoxData
    def Conf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            obj = BoundingBox()
            obj.Init(self._tab.Bytes, o + self._tab.Pos)
            return obj
        return None


def HeadBoxDataStart(builder):
    builder.StartObject(3)


def HeadBoxDataAddFirst(builder, first):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(first), 0)


def AddFirst(builder, first):
    HeadBoxDataAddFirst(builder, first)


def HeadBoxDataAddLast(builder, last):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(last), 0)


def AddLast(builder, last):
    HeadBoxDataAddLast(builder, last)


def HeadBoxDataAddConf(builder, conf):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(conf), 0)


def AddConf(builder, conf):
    HeadBoxDataAddConf(builder, conf)


def HeadBoxDataEnd(builder):
    return builder.EndObject()


def EndHeadBoxData(builder):
    return HeadBoxDataEnd(builder)


# Namespace: SmartCamera
class UploadData(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UploadData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUploadData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # UploadData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UploadData
    def DeviceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.StringFlags, o + self._tab.Pos
            )
        return None

    # UploadData
    def CustomerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.StringFlags, o + self._tab.Pos
            )
        return None

    # UploadData
    def StoreId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.StringFlags, o + self._tab.Pos
            )
        return None

    # UploadData
    def ListDeadTrackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UploadData
    def ListDeadTrack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Vector(j, o)
        return 0


def UploadDataStart(builder):
    builder.StartObject(4)


def UploadDataAddDeviceId(builder, deviceId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.StringFlags(), deviceId)


def AddDeviceId(builder, deviceId):
    UploadDataAddDeviceId(builder, builder.CreateString(deviceId))


def UploadDataAddCustomerId(builder, customerId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.StringFlags(), customerId)


def AddCustomerId(builder, customerId):
    UploadDataAddCustomerId(builder, builder.CreateString(customerId))


def UploadDataAddStoreId(builder, storeId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.StringFlags(), storeId)


def AddStoreId(builder, storeId):
    UploadDataAddStoreId(builder, builder.CreateString(storeId))


def UploadDataAddListDeadTrack(builder, listDeadTrack):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(listDeadTrack), 0)


def AddListDeadTrack(builder, listDeadTrack):
    UploadDataAddListDeadTrack(builder, listDeadTrack)


def UploadDataEnd(builder):
    return builder.EndObject()


def EndUploadData(builder):
    return UploadDataEnd(builder)


# Namespace: SmartCamera
class WatchTimePair(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WatchTimePair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWatchTimePair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # WatchTimePair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WatchTimePair
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0

    # WatchTimePair
    def End(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0


def WatchTimePairStart(builder):
    builder.StartObject(2)


def WatchTimePairAddStart(builder, start):
    builder.PrependUint64Slot(0, start, 0)


def AddStart(builder, start):
    WatchTimePairAddStart(builder, start)


def WatchTimePairAddEnd(builder, end):
    builder.PrependUint64Slot(1, end, 0)


def AddEnd(builder, end):
    WatchTimePairAddEnd(builder, end)


def WatchTimePairEnd(builder):
    return builder.EndObject()


def EndWatchTimePair(builder):
    return WatchTimePairEnd(builder)
